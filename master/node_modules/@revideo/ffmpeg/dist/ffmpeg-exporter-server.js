"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FFmpegExporterServer = void 0;
const telemetry_1 = require("@revideo/telemetry");
const ffmpeg = require("fluent-ffmpeg");
const fs = require("fs");
const os = require("os");
const path = require("path");
const image_stream_1 = require("./image-stream");
const settings_1 = require("./settings");
const utils_1 = require("./utils");
const SAMPLE_RATE = 48000;
/**
 * The server-side implementation of the FFmpeg video exporter.
 */
class FFmpegExporterServer {
    constructor(settings) {
        this.settings = settings;
        this.jobFolder = path.join(`${os.tmpdir()}`, `revideo-${this.settings.name}-${settings.hiddenFolderId}`);
        this.audioFilenames = [];
        this.stream = new image_stream_1.ImageStream();
        ffmpeg.setFfmpegPath(settings_1.ffmpegSettings.getFfmpegPath());
        this.command = ffmpeg();
        // Input image sequence
        this.command
            .input(this.stream)
            .inputFormat('image2pipe')
            .inputFps(settings.fps);
        // Input audio file
        if (settings.includeAudio && settings.audio) {
            this.command
                .input(settings.audio.slice(1))
                // FIXME Offset only works for negative values.
                .inputOptions([`-itsoffset ${settings.audioOffset ?? 0}`]);
        }
        // Output settings
        const size = {
            x: Math.round(settings.size.x * settings.resolutionScale),
            y: Math.round(settings.size.y * settings.resolutionScale),
        };
        this.command
            .output(path.join(this.jobFolder, `visuals.mp4`))
            .outputOptions(['-pix_fmt yuv420p', '-shortest'])
            .outputFps(settings.fps)
            .size(`${size.x}x${size.y}`);
        if (settings.fastStart) {
            this.command.outputOptions(['-movflags +faststart']);
        }
        this.promise = new Promise((resolve, reject) => {
            this.command.on('end', resolve).on('error', reject);
        });
    }
    async start() {
        (0, telemetry_1.sendEvent)(telemetry_1.EventName.RenderStarted);
        if (!fs.existsSync(this.settings.output)) {
            await fs.promises.mkdir(this.settings.output, { recursive: true });
        }
        if (!fs.existsSync(this.jobFolder)) {
            await fs.promises.mkdir(this.jobFolder, { recursive: true });
        }
        this.command.run();
    }
    async handleFrame({ data }) {
        const base64Data = data.slice(data.indexOf(',') + 1);
        this.stream.pushImage(Buffer.from(base64Data, 'base64'));
    }
    async generateAudio({ assets, startFrame, endFrame, }) {
        const assetPositions = this.getAssetPlacement(assets);
        for (const asset of assetPositions) {
            let hasAudioStream = true;
            if (asset.type !== 'audio') {
                hasAudioStream = await (0, utils_1.checkForAudioStream)(this.resolvePath(asset.src));
            }
            if (asset.playbackRate !== 0 && asset.volume !== 0 && hasAudioStream) {
                const filename = await this.prepareAudio(asset, startFrame, endFrame);
                this.audioFilenames.push(filename);
            }
        }
        if (this.audioFilenames.length > 0) {
            await this.mergeAudioTracks();
        }
    }
    async mergeMedia() {
        if (this.audioFilenames.length > 0) {
            await (0, utils_1.mergeAudioWithVideo)(path.join(this.jobFolder, `audio.wav`), path.join(this.jobFolder, `visuals.mp4`), path.join(this.settings.output, `${this.settings.name}.mp4`));
        }
        else {
            const destination = path.join(this.settings.output, `${this.settings.name}.mp4`);
            await fs.promises.copyFile(path.join(this.jobFolder, `visuals.mp4`), destination);
        }
    }
    resolvePath(assetPath) {
        let resolvedPath;
        if (assetPath.startsWith('http://') || assetPath.startsWith('https://')) {
            resolvedPath = assetPath;
        }
        else {
            resolvedPath = path.join(this.settings.output, '../public', assetPath);
        }
        return resolvedPath;
    }
    async end(result) {
        this.stream.pushImage(null);
        if (result === 1) {
            try {
                this.command.kill('SIGKILL');
                await this.promise;
            }
            catch (err) {
                (0, telemetry_1.sendEvent)(telemetry_1.EventName.Error, { message: err.message });
            }
        }
        else {
            await this.promise;
        }
    }
    async kill() {
        try {
            this.command.kill('SIGKILL');
            await this.promise;
        }
        catch (_) {
            return;
        }
    }
    async prepareAudio(asset, startFrame, endFrame) {
        // Construct the output path
        const sanitizedKey = asset.key.replace(/[/[\]]/g, '-');
        const outputPath = path.join(this.jobFolder, `${sanitizedKey}.wav`);
        const trimLeft = asset.trimLeftInSeconds / asset.playbackRate;
        const trimRight = 1 / this.settings.fps +
            Math.min(trimLeft + asset.durationInSeconds, trimLeft + (endFrame - startFrame) / this.settings.fps);
        const padStart = (asset.startInVideo / this.settings.fps) * 1000;
        const assetSampleRate = await (0, utils_1.getSampleRate)(this.resolvePath(asset.src));
        const padEnd = Math.max(0, (assetSampleRate * (endFrame - startFrame + 1)) / this.settings.fps -
            (assetSampleRate * asset.duration) / this.settings.fps -
            (assetSampleRate * padStart) / 1000);
        const atempoFilters = await this.calculateAtempoFilters(asset.playbackRate); // atempo filter value must be >=0.5 and <=100. If the value is higher or lower, this function sets multiple atempo filters
        const resolvedPath = this.resolvePath(asset.src);
        await new Promise((resolve, reject) => {
            const audioFilters = [
                ...atempoFilters,
                `atrim=start=${trimLeft}:end=${trimRight}`,
                `apad=pad_len=${padEnd}`,
                `adelay=${padStart}|${padStart}|${padStart}`,
                `volume=${asset.volume}`,
            ].join(',');
            ffmpeg(resolvedPath)
                .audioChannels(2)
                .audioCodec('pcm_s16le')
                .audioFrequency(SAMPLE_RATE)
                .outputOptions([`-af`, audioFilters])
                .on('end', () => {
                resolve();
            })
                .on('error', err => {
                console.error(`Error processing audio for asset key: ${asset.key}`, err);
                reject(err);
            })
                .save(outputPath);
        });
        return outputPath;
    }
    async mergeAudioTracks() {
        return new Promise((resolve, reject) => {
            const command = ffmpeg();
            this.audioFilenames.forEach(filename => {
                command.input(filename);
            });
            command
                .complexFilter([
                `amix=inputs=${this.audioFilenames.length}:duration=longest,volume=${this.audioFilenames.length}`,
            ])
                .outputOptions(['-c:a', 'pcm_s16le'])
                .on('end', () => {
                resolve();
            })
                .on('error', err => {
                console.error(`Error merging audio tracks: ${err.message}`);
                reject(err);
            })
                .save(path.join(this.jobFolder, `audio.wav`));
        });
    }
    async calculateAtempoFilters(playbackRate) {
        const atempoFilters = [];
        // Calculate how many times we need to 100x the speed
        let rate = playbackRate;
        while (rate > 100.0) {
            atempoFilters.push('atempo=100.0');
            rate /= 100.0;
        }
        // Add the last atempo filter with the remaining rate
        if (rate > 1.0) {
            atempoFilters.push(`atempo=${rate}`);
        }
        // Calculate how many times we need to halve the speed
        rate = playbackRate;
        while (rate < 0.5) {
            atempoFilters.push('atempo=0.5');
            rate *= 2.0;
        }
        // Add the last atempo filter with the remaining rate
        if (rate < 1.0) {
            atempoFilters.push(`atempo=${rate}`);
        }
        return atempoFilters;
    }
    getAssetPlacement(frames) {
        const assets = [];
        // A map to keep track of the first and last currentTime for each asset.
        const assetTimeMap = new Map();
        for (let frame = 0; frame < frames.length; frame++) {
            for (const asset of frames[frame]) {
                if (!assetTimeMap.has(asset.key)) {
                    // If the asset is not in the map, add it with its current time as both start and end.
                    assetTimeMap.set(asset.key, {
                        start: asset.currentTime,
                        end: asset.currentTime,
                    });
                    assets.push({
                        key: asset.key,
                        src: asset.src,
                        type: asset.type,
                        startInVideo: frame,
                        endInVideo: frame,
                        duration: 0, // Placeholder, will be recalculated later based on frames
                        durationInSeconds: 0, // Placeholder, will be calculated based on currentTime
                        playbackRate: asset.playbackRate,
                        volume: asset.volume,
                        trimLeftInSeconds: asset.currentTime,
                    });
                }
                else {
                    // If the asset is already in the map, update the end time.
                    const timeInfo = assetTimeMap.get(asset.key);
                    if (timeInfo) {
                        timeInfo.end = asset.currentTime;
                        assetTimeMap.set(asset.key, timeInfo);
                    }
                    const existingAsset = assets.find(a => a.key === asset.key);
                    if (existingAsset) {
                        existingAsset.endInVideo = frame;
                    }
                }
            }
        }
        // Calculate the duration based on frame count and durationInSeconds based on currentTime.
        assets.forEach(asset => {
            const timeInfo = assetTimeMap.get(asset.key);
            if (timeInfo) {
                // Calculate durationInSeconds based on the start and end currentTime values.
                asset.durationInSeconds = timeInfo.end - timeInfo.start;
            }
            // Recalculate the original duration based on frame count.
            asset.duration = asset.endInVideo - asset.startInVideo + 1;
        });
        return assets;
    }
}
exports.FFmpegExporterServer = FFmpegExporterServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZtcGVnLWV4cG9ydGVyLXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mZm1wZWctZXhwb3J0ZXItc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGtEQUF3RDtBQUN4RCx3Q0FBd0M7QUFDeEMseUJBQXlCO0FBQ3pCLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsaURBQTJDO0FBQzNDLHlDQUEwQztBQUMxQyxtQ0FBZ0Y7QUFFaEYsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBdUIxQjs7R0FFRztBQUNILE1BQWEsb0JBQW9CO0lBUS9CLFlBQW1CLFFBQWdDO1FBQ2pELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDeEIsR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFDaEIsV0FBVyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsY0FBYyxFQUFFLENBQzNELENBQUM7UUFDRixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksMEJBQVcsRUFBRSxDQUFDO1FBRWhDLE1BQU0sQ0FBQyxhQUFhLENBQUMseUJBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFFeEIsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxPQUFPO2FBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDbEIsV0FBVyxDQUFDLFlBQVksQ0FBQzthQUN6QixRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTFCLG1CQUFtQjtRQUNuQixJQUFJLFFBQVEsQ0FBQyxZQUFZLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzVDLElBQUks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